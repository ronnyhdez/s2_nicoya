---
title: Getting Started with Sentinel-2 Downloading, Processing, and Analyzing Satellite Imagery Using Python 
author: Ronny A. Hernandez Mora
execute:
  message: false
  warning: false
toc: true
toc-title: Table of contents
toc-location: left
lightbox: true
format: 
  html:
    theme:
      - flatly
    linkcolor: "#FF5500"
    highlight-style: tango
    number-sections: false
    colorlinks: true
    code-fold: true
    code-line-numbers: true
editor: visual
jupyter: python3
editor_options: 
  chunk_output_type: 
---

## Getting the data

There are several solutions to obtain the satellite images. In this case, we
just want to obtain one image to explore the necessary steps to understan the
files, meta data, transform the pixels and visualize the image.

To download any satellite image from the Copernicus Sentinel Missions we can 
use [Copernicus Data Space](https://browser.dataspace.copernicus.eu/)

When you visit that link, you can see something similar to (as January 2025):

![](img/copernicus_1)

Select the image by zooming into the area of interest. You can set a group of
filter parameters from the `parameters` tab that will help you to select the
image.

![](img/copernicus_2)

To download the images you will need to have an account. If you just want
to explore around it's not necessary to have the account.

Once the search process is done, you will have a set of options to choose from.
For this example we just one to work with one image and not several of them 
(which can imply merging them in a separated process)

Your search process can look something like:

![](img/copernicus_3)

In my case, I wanted a clear image with atmospheric correction, so I proceed to
download the `L2A` product. 

![](img/copernicus_4)

You can see the names are quite long. This has a reason, which is to provide
some information about the product we are about to decide to use.

For example, the file name pattern `S2A_MSIL2A_20240303T160141_N0510_R097_T16PFS`
contains:

  - S2A: Sentinel-2A satellite (one of two satellites in the constellation)
  - MSIL2A/MSIL1C: Processing level
  - L2A: Bottom-of-atmosphere reflectance (atmospherically corrected)
  - L1C: Top-of-atmosphere reflectance (not atmospherically corrected)
  - 20240303T160141: Acquisition date and time (March 3, 2024, 16:01:41 UTC)
  - R097: Relative orbit number
  - T16PFS: Tile identifier

Why do we have some size differences? 

L2A: 1054MB
L1C: 753MB and 690MB
The L2A product is larger because it contains additional atmospheric correction data.


## What are all those files?

So, now we have the file locally. It is unzipped and in a folder in our
repository

The product will contain many files

![](img/contents)

The images will be contained in the `GRANULE`. Inside this one we will find
another set of folders which will separate the files by resolution:

  - R10m: 10 meter resolution (highest)
  - R20m: 20 meter resolution
  - R60m: 60 meter resolution (lowest)

Inside each of those, there are going to be other files ...

... Key bands and their common uses:

  - B02 (Blue), B03 (Green), B04 (Red): Natural color imagery
  - B08: Near Infrared (NIR) - vegetation studies
  - B8A: Narrow NIR
  - B11, B12: Short-wave Infrared (SWIR) - geology, soil moisture
  - TCI: True Color Image (natural color composite)
  - AOT: Aerosol Optical Thickness
  - WVP: Water Vapor
  - SCL: Scene Classification Layer

## Reading the product

Now that we understand what are the contents of the product we downloaded, we
can proceed to read some files and check them out. As a first step, I just
want to process 3 bands (Red, Green, Blue) to obtain a natural composite
image. Later I will use other bands to calculate some vegetation indices and
explore how the looked like on March 3rd, 2024 (Satellite image date)


```{python}
import rasterio
import numpy as np
from rasterio import plot
import matplotlib.pyplot as plt
```

Given that the path is so long, I'm going to create some objects with the
relative path, so later I would use just the object name, and save a lot of
typing.

```{python}
red = 'S2A_MSIL2A_20240303T160141_N0510_R097_T16PFS_20240303T212049.SAFE/GRANULE/L2A_T16PFS_A045425_20240303T161440/IMG_DATA/R10m/T16PFS_20240303T160141_B04_10m.jp2'
green = 'S2A_MSIL2A_20240303T160141_N0510_R097_T16PFS_20240303T212049.SAFE/GRANULE/L2A_T16PFS_A045425_20240303T161440/IMG_DATA/R10m/T16PFS_20240303T160141_B03_10m.jp2'
blue = 'S2A_MSIL2A_20240303T160141_N0510_R097_T16PFS_20240303T212049.SAFE/GRANULE/L2A_T16PFS_A045425_20240303T161440/IMG_DATA/R10m/T16PFS_20240303T160141_B02_10m.jp2'
nir = 'S2A_MSIL2A_20240303T160141_N0510_R097_T16PFS_20240303T212049.SAFE/GRANULE/L2A_T16PFS_A045425_20240303T161440/IMG_DATA/R10m/T16PFS_20240303T160141_B08_10m.jp2'
```
### Explore the file with lazy loading

I'm using the `open` method from `rasterio` which is going to create a reference
to the file without loading its content to the memory (lazy loading). That way 
we will be able to explore the object and validate that we have something 
reasonable.

```{python}
red_band = rasterio.open(red)
green_band = rasterio.open(green)
blue_band = rasterio.open(blue)
```

Now that we read the necessary bands with a reference to each of the objects,
we can access the metadata without loading the whole file into our computer RAM.

```{python}
print(red_band.shape)
```

```{python}
print(red_band.crs)
```

```{python}
red_band.count
```

What is the type of byte data?

```{python}
red_band.dtypes[0]
```

What are the geospatial limits of our image?

```{python}
red_band.bounds
```

Now, let's plot one of them to validate that everything is fine:

```{python}
plot.show(red_band)
```

### Load the file to memory

Everything looks fine, there is nothing that indicates that there is a problem
so let's load into memory the files. This step could be a little bit problematic
if the image is so big that we ran out of memory. Be aware!


```{python}
red = red_band.read(1).astype('float32')
green = green_band.read(1).astype('float32')
blue = blue_band.read(1).astype('float32')
```

So far, so good. 

## Visualizing the image

Now that we have all the data in memory, we can visualize the satellite image.
We would need some processing to make it look nice 

```{python}
#| label: fig-enhanced_image
#| fig-cap: "Natural color composite of the Nicoya Peninsula, Costa Rica, derived from Sentinel-2A imagery (March 3, 2024. 16:01:41 UTC). Image produced using bands B04 (Red), B03 (Green), and B02 (Blue) at 10m spatial resolution from a Level-2A atmospherically corrected product."
#| fig-width: 12
#| fig-height: 14

def enhance_image(array, percentile=2):
    """Enhance image contrast using percentile cuts and histogram stretching"""
    min_val = np.percentile(array, percentile)
    max_val = np.percentile(array, 100 - percentile)
    stretched = np.clip(array, min_val, max_val)
    stretched = ((stretched - min_val) / (max_val - min_val) * 255).astype(np.uint8)
    return stretched

red_enhanced = enhance_image(red)
green_enhanced = enhance_image(green)
blue_enhanced = enhance_image(blue)

# Stack the bands
rgb = np.dstack((red_enhanced, green_enhanced, blue_enhanced))

plt.figure(figsize=(15, 15))
plt.imshow(rgb)
plt.axis('off')
plt.tight_layout()
plt.show()
```
Other options to improve the image. This is just a process to make it look
better as a visualization of the landscape in a attractive manner. It doesn't
have any research purpose so far. 

```{python}
#| label: fig-vignette
#| fig-cap: "Enhanced natural color composite of the Nicoya Peninsula, Costa Rica, from Sentinel-2A imagery (March 3, 2024. 16:01:41 UTC). The image combines contrast enhancement and vignette effect to emphasize landscape features. Produced using 10m resolution bands (B04, B03, B02) from Level-2A atmospherically corrected data."
#| fig-width: 12
#| fig-height: 14

def add_vignette(image, strength=0.3):  
    rows, cols = image.shape[:2]
    Y, X = np.ogrid[:rows, :cols]
    center_y, center_x = rows/2, cols/2
    distances = np.sqrt((X - center_x)**2 + (Y - center_y)**2)
    max_dist = np.sqrt(center_y**2 + center_x**2)
    normalized_distances = distances/max_dist
    vignette = 1 - (normalized_distances * strength)
    vignette = np.clip(vignette, 0, 1)
    vignette = vignette[:, :, np.newaxis]
    return (image * vignette).astype(np.uint8)

final_image = add_vignette(rgb, strength=0.4)  

plt.figure(figsize=(15,15))
plt.imshow(final_image)
plt.axis('off')
plt.show()
```

Finally, let's not forget to close the band files when done

```{python}
red_band.close()
green_band.close()
blue_band.close()
```


